# File: main.tf
# This file contains all the necessary Terraform code for setting up the "Check Java Version" project in Octopus Deploy.

# Step 1: Define the Octopus provider and required variables
provider "octopusdeploy" {
  api_key = var.octopus_api_key
  address = var.octopus_server
}

# Step 2: Define Variables (could be provided in a separate "terraform.tfvars" file)
variable "octopus_api_key" {
  description = "API key for Octopus Deploy"
  type        = string
}

variable "octopus_server" {
  description = "URL of the Octopus Deploy server"
  type        = string
}

variable "ssh_user" {
  description = "SSH username for the deployment targets"
  type        = string
}

variable "ssh_private_key" {
  description = "Path to the SSH private key used for connecting"
  type        = string
}

# Step 3: Create a new project in Octopus for Java version checking
resource "octopusdeploy_project" "java_version_check" {
  name              = "Check Java Version"
  lifecycle_id      = octopusdeploy_lifecycle.lc_java.id
  project_group_id  = octopusdeploy_project_group.pg_java.id
  description       = "Project to check the Java version on deployment targets"
  is_version_controlled = false
}

# Step 4: Create a lifecycle for the Java version check project
resource "octopusdeploy_lifecycle" "lc_java" {
  name = "Java Version Check Lifecycle"
}

# Step 5: Define the project group where this project will be housed
resource "octopusdeploy_project_group" "pg_java" {
  name = "Java Tools"
}

# Step 6: Create a runbook to execute the Java check on deployment targets
resource "octopusdeploy_runbook" "check_java_version" {
  project_id = octopusdeploy_project.java_version_check.id
  name       = "Check Java Version"
  description = "Run a script on deployment targets to check the Java version"
}

# Step 7: Create the deployment process that includes the step to run the script
resource "octopusdeploy_deployment_process" "dp_check_java" {
  project_id = octopusdeploy_project.java_version_check.id

  step {
    name = "Check Java Version"
    package_requirement = "let_octopus_deploy_choose"

    action {
      name   = "Run SSH Script"
      action_type = "Octopus.Script"

      worker_pool_id = "SomeWorkerPool" # Replace with your worker pool ID

      properties = {
        "Octopus.Action.Script.ScriptBody" = <<EOT
#!/bin/bash
java -version
if [ $? -eq 0 ]; then
  echo "Java is installed and version is:"
  java -version
else
  echo "Java is not installed"
  exit 1
fi
EOT
      }
    }
  }
}

# Step 8: Define deployment targets (assuming you are using SSH to connect)
resource "octopusdeploy_deployment_target" "linux_targets" {
  name               = "My Linux Server"
  roles              = ["java-server"]
  endpoint {
    communication_style = "SSH"
    host                = "10.0.0.1" # Replace with your deployment target IP
    port                = 22
    username            = var.ssh_user
    private_key_file    = var.ssh_private_key
  }
  environment_ids = [octopusdeploy_environment.env_java.id]
}

# Step 9: Define the environment for the deployment targets
resource "octopusdeploy_environment" "env_java" {
  name = "Java Servers"
}

# Step 10: Optionally, define a schedule or trigger for the runbook
resource "octopusdeploy_runbook_trigger" "runbook_trigger" {
  runbook_id = octopusdeploy_runbook.check_java_version.id
  description = "Run the Java version check every week"
  filter {
    environment_ids = [octopusdeploy_environment.env_java.id]
    roles = ["java-server"]
  }
  schedule {
    interval = "Week"
  }
}

# You can apply this using:
# terraform init
# terraform plan
# terraform apply

# Octopus Deploy provider configuration
provider "octopusdeploy" {
  address  = var.octopus_server_url
  api_key  = var.octopus_api_key
  space_id = var.octopus_space_id
}

# Variables
variable "octopus_server_url" {
  type        = string
  description = "The URL of your Octopus Deploy server"
}

variable "octopus_api_key" {
  type        = string
  description = "API key for Octopus Deploy"
  sensitive   = true
}

variable "octopus_space_id" {
  type        = string
  description = "ID of the space in Octopus Deploy"
}

# Project
resource "octopusdeploy_project" "java_version_test" {
  name        = "Java Version Test"
  description = "Project to test Java versions on deployment targets"
  lifecycle_id = data.octopusdeploy_lifecycle.default_lifecycle.id
  project_group_id = data.octopusdeploy_project_group.default_project_group.id
  is_disabled = false

  included_library_variable_sets = [
    data.octopusdeploy_library_variable_set.java_variables.id
  ]
}

# Environment
resource "octopusdeploy_environment" "test_environment" {
  name        = "Java Version Test Environment"
  description = "Environment for testing Java versions"
}

# Deployment process
resource "octopusdeploy_deployment_process" "java_version_test" {
  project_id = octopusdeploy_project.java_version_test.id

  step {
    name = "Check Java Version"
    
    action {
      action_type    = "Octopus.Script"
      name           = "Check Java Version"
      run_on_server  = false

      properties = {
        "Octopus.Action.Script.ScriptSource" = "Inline"
        "Octopus.Action.Script.Syntax"       = "Bash"
        "Octopus.Action.Script.ScriptBody"   = <<-EOT
          #!/bin/bash
          java_version=$(java -version 2>&1 | awk -F '"' '/version/ {print $2}')
          echo "Java version: $java_version"
          
          # Compare with expected version
          if [[ "$java_version" == "#{Java.ExpectedVersion}" ]]; then
            echo "Java version matches expected version"
          else
            echo "Java version does not match expected version"
            exit 1
          fi
        EOT
      }
    }
  }
}

# Data sources
data "octopusdeploy_lifecycle" "default_lifecycle" {
  name = "Default Lifecycle"
}

data "octopusdeploy_project_group" "default_project_group" {
  name = "Default Project Group"
}

data "octopusdeploy_library_variable_set" "java_variables" {
  name = "Java Variables"
}

# Output
output "project_id" {
  value = octopusdeploy_project.java_version_test.id
}
